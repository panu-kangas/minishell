
TIMO:


- echo hello >hello$not_found
	--> meillä $not_found jää laajentamatta. Lopputuloksena pitäis syntyä filu hello
	--> samoin: >$not_found:hello pitäis luoda filu :hello, meillä tulee ambiguous redirect

- export PANU="   jee   jee   jeee   " ja perään echo hello > '$PANU'
	--> Pitäis luoda tiedosto $PANU, mut meillä tulee ambiguous, koska aina kun nimessä on $, niin meil tulee ambiguous
	--> Täytyy käyttää jotain "amb redirect" flagia, jotta tiedetään et millon pitää heittää se error!

- minishell-1.1$: $P_K
minishell: _K: command not found
	--> Eli command expand ei ymmärrä alaviivaa normi characteriks

- echo hello > $PANU
minishell: $$PANU: ambiguous redirect --> ylimääränen $

- echo hello > "$PANU"
	--> Tää ei ookaan ambiguous, vaan laajentuu yhdeks stringiks, vaikka $PANU koostuu useista sanoista
	--> Eli jos PANU="  jee  jee   jeee" niin > "$PANU" luo filun    jee  jee   jeee




DONE
- Syntax error: these don't work yet or have wrong message:
		--> >>>>> does nothig, I suppose  bash `>>'
		--> ><  does nothing  bash: syntax error near unexpected token `<'
		--> <> >: No such file or directory    bash 'newline'
		--> >><  makes file <   bash `<'
		--> >>|      near unexpected token 'newline'
		--> <<<<<<<    bash syntax error near unexpected token `<<<'
		--> <<> meilla heredoc  bash syntax error near unexpected token `>'
		--> <<>>
MAYBE DONE    - Heredoc: limiter (in our logic, filename of heredoc) does not expand at all! SEGFAUL
DONE 	- Parsing of file names: if a file name is non_expandable env_var, leave it be! I need it later in program
I THINK THIS WORKS????    - Env_var expansion bug: _ is a valid character in env_var. So PANU_KANGAS should be one variable
		---> Our parsing would only expand PANU and then concat it to _KANGAS
DONE     - Env_var expansion / parsing: if we do solo expansion of env_var that has spaces in it, they should be parsed
		--> example:
		--> bash-3.2$ export PANU="echo hello"
		--> bash-3.2$ $PANU
		--> hello	meilla HEREDOC	--> so the "echo hello" got parsed into a command and arg




XX Env_var expansions with quotes: $PATH expands, "$PATH" expands, '$PATH' does not
XX Handle $?
XX Remove quotes from files (example: > "file 1" should create a file named file 1, so no quotes)
XX Quote handling (remove quotes from commands, args and files, EXCEPT here_doc limiter)
XX Env_var expansion with special char: if we have an env_var TIMO=best, and you run $TIMO:jee, eventual result should be best:jee
	--> This means that the env_var is searched only until a special char is found, and then the expanding happens only to the part
		before special char! And in the end, the expansion is concatonated to the rest of the string.
XX Edge-case of redirect			bash-3.2$ >""
								bash: : No such file or directory
XX Edge-case for parsing			bash-3.2$ file1<cat
								bash: cat: No such file or directory	--> our minishell says "minishell: file1<cat: command not found"
XX Minishell: echo hello>file1 --> should be parsed to echo hello > file1, now it echoes "hello>file1"
XX "<< EOF" or " " will result in 'minishell: : command not found', but bash doesn't
XX minishell-1.1$: "echo"" """hello"" --> didn't do anything
XX Env_var expansions with blank spaces
	--> Example:				bash-3.2$ export PANU="   jee    jee    jee   "		--> value has blank spaces
								bash-3.2$ env | grep PANU
								PANU=   jee    jee    jee							--> They are stored in env_list
								bash-3.2$ echo $PANU
								jee jee jee											--> BUT they are trimmed away when expanding
								bash-3.2$ echo "$PANU"
								jee    jee    jee 									--> EXCEPT if the env_var is inside double quotation
XX Heredoc: limiter (in our logic, filename of heredoc) does not expand at all!
XX Env_var expansion / parsing: if we do solo expansion of env_var that has spaces in it, they should be parsed
		--> example:
		--> bash-3.2$ export PANU="echo hello"
		--> bash-3.2$ $PANU
		--> hello				--> so the "echo hello" got parsed into a command and arg



------------------------------------



PANU:

- CHECK PHONE NOTES !!
- Signals during solo built_in (DFL vs IGN)
- ft_open_functions: korjaa amb redirect ehto! Ei voi olla aina, kun $ löytyy filunimestä




XX check "Ambiguous redirect" inside ft_redirect!!
XX CD ISSUES:
	--> When trying "cd ." inside a deleted folder, bash message is --> cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
	--> When trying "cd ..", our minishell has a wrong message
XX HD: Minishell: <extra.c << EOF cat | grep helo --> When stopped with SIGINT, minishell produces an extra NL for some reason
XX HD: Travelling cursor, when termios is altered --> FIXED, just needs testing when quot parsing is done
XX HD: Move heredoc out of child processes!! Because SIGINT in a heredoc should stop the whole pipeline (example <<EOF cat | ls)
XX HD: Current line gets deleted with ctrl-C
XX HD: Here_doc env_var expanding (Panu) --> EOF vs "EOF"
XX SHLVL --> do SHLVL++ in save_env_lst
XX Unset doesn't work on _=/usr/bin/env
XX declare -x _="./a.out" --> this can be seen with env, but not with export
XX Exit-built_in arguments: check int_max, int_min , negative etc
XX Non global env var --> if command has = and there are no args, process_non_global_env_var
XX Also: You can change global env var value without export!!!! So after export TEST=testi, you can just say TEST=festi, and it changes
XX Fix pwd: if folder has been removed, behaviour is different. Check bash (and notes in .c file)
XX Check for lone redirect in make_processes --> so that "> file1" will create the file
XX SHLVL with characters as value
XX Check SHLVL edge case values (int_min, int_max, negative)
	--> if SHLVL is >= INT_MAX but <= LONG_MAX, new shell has SHLVL value 0 (no error)
	--> if SHLVL is > LONG_MAX, new shell has SHLVL value 1 (no error)
	--> Okay, this is VERY complicated and I think also unnecessary... might just give up :D
	--> if SHLVL == 1000 when starting shell, the value is empty (SHLVL=)
	--> if SHLVL is > 1000 and < INT_MAX when starting shell, we get error message:
		bash: warning: shell level (1001) too high, resetting to 1
		(tested with 1001 as start value)
XX Minishell: echo hello | --> should have some sort of syntax error
XX Minishell: | --> solo pipe sign could maybe be a syntax error ?
XX Unclosed quot: I think this could be just a syntax error! with error message like:
		minishell: syntax error: unclosed quotation
XX if we have only non_found env_var expansion, nothing should happen. We now have the followinng error:
	--> minishell-1.1$: $jaha
	--> minishell: : command not found
	needs to be handled somehow in processes cause $jaha | ls should work too- if we have only non_found env_var expansion, nothing should happen. We now have the followinng error:
	--> minishell-1.1$: $jaha
	--> minishell: : command not found
	needs to be handled somehow in processes cause $jaha | ls should work too


------------------------------------


QUESTIONS:

XX Handling special characters: is this ok at the moment? We should handle them always or not at all, I think.


XX How to handle this?	bash-3.2$ export PANU=>file1 --> this is actually same as "export PANU= >file1", so a matter of parsing
						bash-3.2$ echo hello $PANU

XX rl_clear_history in the end of program (and in exit function also) ??

XX How to handle this? 	bash-3.2$ echo hello2 >$NOT_EXISTING 	--> Maybe in parsing? If filename is $something, exit_code is 1 and write "ambiguous redirect"
						bash: $NOT_EXISTING: ambiguous redirect		--> This same also works with NOT_EXISTING=, so with env_var that has value of '\0'


------------------------------------


CHECK THESE:

XX single and double quotations won't show in env-listed value. I mean:  export TEST='hello world' --> TEST=hello world in variable list (wth env-command)
XX export PATH=$PATH:something
XX Panu: is OS given PATH superior to user given path? Or does it execute the first path it finds (example: ls-executable in work folder, work folder added to PATH)
XX lsof -c minishell